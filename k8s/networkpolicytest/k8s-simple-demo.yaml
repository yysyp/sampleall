#kubectl apply -f k8s-simple-demo.yaml
#kubectl delete -f k8s-simple-demo.yaml
#kubectl delete ns namespacePlaceHolder
#kubectl create namespace namespacePlaceHolder
#kubectl apply -f k8s-simple-demo.yaml --namespace=namespacePlaceHolder
#kubectl delete -f k8s-simple-demo.yaml
#kubectl delete namespace namespacePlaceHolder
#kubectl -n namespacePlaceHolder describe pod k8s-simple-demo
#kubectl -n namespacePlaceHolder get pod -w
#kubectl -n namespacePlaceHolder logs k8s-simple-demo
#Below kubectl exec needs to use CMD or PowerShell, gitbash desnot work:
#kubectl -n namespacePlaceHolder exec -it k8s-simple-demo -- bash
#kubectl -n namespacePlaceHolder exec -it k8s-simple-demo -- /bin/sh
#kubectl -n namespacePlaceHolder port-forward k8s-simple-demo 30080:80
#kubectl explain pod --recursive | grep -i maxRetries
#kubectl -n namespacePlaceHolder logs -f $(kubectl -n namespacePlaceHolder get pods --field-selector status.phase=Running --no-headers -o custom-columns=":metadata.name" | grep simple-demo-web | head -1)
#kubectl get netpol -n namespacePlaceHolder
#kubectl -n namespacePlaceHolder delete networkpolicy access-nginx
#kubectl explain pod --recursive | grep -i maxRetries
#kubectl explain networkpolicy --recursive
apiVersion: v1
kind: Namespace
metadata:
  name: namespacePlaceHolder

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: simple-demo-web
  namespace: namespacePlaceHolder
spec:
  replicas: 2
  selector:
    matchLabels:
      app: simple-demo-web
  template:
    metadata:
      labels:
        app: simple-demo-web
      annotations:
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      securityContext:
        runAsUser: 8888
        runAsGroup: 9999
        fsGroup: 9999
      containers:
        - name: simple-demo-web
          image: imageNamePlaceHolder:versionPlaceHolder
          ports:
            - containerPort: containerPortPlaceHolder
          livenessProbe:
            httpGet:
              path: /healthz
              port: containerPortPlaceHolder
            initialDelaySeconds: 180
            periodSeconds: 60
          volumeMounts:
            - mountPath: /tmp
              name: tmp-volume
            - mountPath: /app/conf
              name: conf-volume
            - mountPath: /app/log
              name: log-volume
            - mountPath: /app/ignorefolder/h2
              name: h2-volume
            - mountPath: /app/upload-folder
              name: upload-volume
      volumes:
        - name: tmp-volume
          emptyDir: {}
        - name: conf-volume
          emptyDir: {}
        - name: log-volume
          emptyDir: {}
        - name: h2-volume
          emptyDir: {}
        - name: upload-volume
          emptyDir: {}
      restartPolicy: Always

---
#Not to create this service you can use this port-forward command instead.
#kubectl -n namespacePlaceHolder port-forward simple-demo-web-67c84789b9-brbm8 nodePortPlaceHolder:containerPortPlaceHolder
apiVersion: v1
kind: Service
metadata:
  name: simple-demo-service
  namespace: namespacePlaceHolder
  labels:
    app: simple-demo-web
spec:
  ports:
    - port: containerPortPlaceHolder # between containers for service call for K8s
      targetPort: containerPortPlaceHolder # container port
      nodePort: nodePortPlaceHolder # by default >30000 for external call
  type: NodePort
  selector:
    app: simple-demo-web

---

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: simple-demo-web-np
  namespace: namespacePlaceHolder
spec:
#  podSelector:
#    matchLabels:
#      app: simple-demo-web
  podSelector: {}
  policyTypes:
#    - Ingress
    - Egress
#  ingress:
#    - from:
#        - podSelector:
#            matchLabels:
#              app: target-pod
#      ports:
#        - protocol: TCP
#          port: 8880
#  egress:
#    - to:
#        - ipBlock:
#            cidr: 10.0.0.0/24
#      ports:
#        - protocol: TCP
#          port: 32000
#          endPort: 32768


